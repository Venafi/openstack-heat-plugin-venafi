# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16


description: >
   Venafi testing certificate

parameters:
  #Subject parameters
  common_name:
    type: string
    label: Common Name
    description: Name of key-pair to be used for compute instance
    default: 'fake.cert.example.com'
  sans:
    type: comma_delimited_list
    label: Subject Alternative Names
    default: []
  #TPP credentials parameters
  access_token:
    type: string
    default: ""
    hidden: true
  tpp_user:
    type: string
    description: Deprecated, use access_token instead
    default: ""
  tpp_password:
    type: string
    description: Deprecated, use access_token instead
    default: ""
    hidden: true
  #Cloud credentials parameters
  api_key:
    type: string
    default: ""
    hidden: true
  #Conection parameters
  venafi_url:
    type: string
    default: ""
  trust_bundle:
    type: string
    default: ""
  #TPP or Cloud policy name
  zone:
    type: string
    default: ""
  #Set to true to use fake connector for testing purposes
  fake:
    type: boolean
    default: "false"
  #Whether or not to save private key in the stack
  save_private_key:
    type: boolean
    default: "true"
  #Instance params
  image:
    type: string
    default: "bionic-server-cloudimg-amd64"
  flavor:
    type: string
    default: "m1.small"
  net-id:
    type: string
    default: "8b9bb3e8-75f0-4062-88b5-0d03e0bf8ef8"
  keypair:
    type: string
    default: "devstack-manager"

resources:
  venafi_certificate:
    type: OS::Nova::VenafiCertificate
    properties:
      name: 'venafi certificate'
      zone: { get_param: zone }
      common_name: { get_param: common_name }
      sans: { get_param: sans }
      venafi_url: { get_param: venafi_url }
      api_key: { get_param: api_key }
      access_token: { get_param: access_token }
      tpp_user: { get_param: tpp_user }
      tpp_password: { get_param: tpp_password }
      fake: { get_param: fake }
      trust_bundle: { get_param: trust_bundle }
      save_private_key: { get_param: save_private_key }

  ssl_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /etc/nginx/certs/server.crt
          content: { get_attr: [venafi_certificate, certificate] }
        - path: /etc/nginx/certs/server.key
          content: { get_attr: [venafi_certificate, private_key] }
        - path: /etc/nginx/certs/chain.crt
          content: { get_attr: [venafi_certificate, chain] }
        - path: /etc/nginx/conf.d/example.com.conf
          content: |
            server {
                listen 443;
                ssl on;
                ssl_certificate /etc/nginx/certs/server.crt;
                ssl_certificate_key /etc/nginx/certs/server.key;
                server_name venafi.example.com;
                root /var/www/html;
            }

        runcmd:
          - 'echo "nameserver 8.8.8.8" |sudo tee > /etc/resolv.conf'
          - 'sudo apt-get install -y nginx'

  ssl_server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: ssl_config}

  ssl_instance:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: keypair}
      user_data_format: RAW
      user_data:
        get_resource: ssl_server_init
      networks:
        - network: {get_param: net-id}


outputs:
  venafi_certificate:
    value: { get_attr: [venafi_certificate, certificate] }
  venafi_chain:
    value: { get_attr: [venafi_certificate, chain] }
  venafi_pkey:
    value: { get_attr: [venafi_certificate, private_key] }
  venafi_csr:
    value: { get_attr: [venafi_certificate, csr] }
